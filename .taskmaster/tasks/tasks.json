{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "프로젝트 초기 설정 및 개발 환경 구성",
        "description": "NestJS 프로젝트 초기화, TypeScript 설정, 개발 환경 구성",
        "status": "done",
        "priority": "high",
        "dependencies": [],
        "details": "NestJS CLI를 사용하여 프로젝트를 초기화하고, TypeScript 설정, ESLint, Prettier, Jest 테스트 환경을 구성합니다. 클린아키텍처 패턴을 위한 폴더 구조를 설정하고, PostgreSQL 연결을 위한 기본 설정을 완료합니다.",
        "testStrategy": "프로젝트 빌드 및 기본 테스트 실행으로 개발 환경이 올바르게 구성되었는지 확인",
        "subtasks": [
          {
            "id": 1,
            "title": "NestJS 프로젝트 초기화",
            "description": "NestJS CLI를 사용하여 새 프로젝트 생성",
            "status": "done",
            "details": "nest new auto-trade-server 명령어로 프로젝트를 생성하고, 필요한 기본 의존성을 설치합니다.",
            "testStrategy": "npm run start:dev로 개발 서버가 정상적으로 실행되는지 확인"
          },
          {
            "id": 2,
            "title": "TypeScript 및 개발 도구 설정",
            "description": "ESLint, Prettier, Jest 설정 구성",
            "status": "done",
            "details": "코드 품질을 위한 ESLint와 Prettier 설정, Jest를 사용한 테스트 환경을 구성합니다.",
            "testStrategy": "ESLint와 Prettier가 정상적으로 작동하는지 확인, Jest 테스트 실행"
          },
          {
            "id": 3,
            "title": "클린아키텍처 폴더 구조 설정",
            "description": "도메인, 애플리케이션, 인프라 레이어 구조 생성",
            "status": "done",
            "details": "src 폴더 내에 domain, application, infrastructure 레이어를 구분하여 클린아키텍처 패턴에 맞는 폴더 구조를 생성합니다.",
            "testStrategy": "폴더 구조가 클린아키텍처 원칙에 맞게 구성되었는지 확인"
          }
        ]
      },
      {
        "id": 2,
        "title": "데이터베이스 설계 및 PostgreSQL 설정",
        "description": "PostgreSQL 데이터베이스 설계, 스키마 정의, 연결 설정",
        "status": "done",
        "priority": "high",
        "dependencies": [
          1
        ],
        "details": "주식 자동매매 시스템에 필요한 데이터베이스 스키마를 설계하고, PostgreSQL 데이터베이스를 설정합니다. 사용자, 주식 정보, 거래 내역, 자동매매 설정 등을 저장할 테이블을 생성합니다.",
        "testStrategy": "데이터베이스 연결 테스트 및 기본 CRUD 작업 수행으로 스키마가 올바르게 작동하는지 확인",
        "subtasks": [
          {
            "id": 1,
            "title": "PostgreSQL 데이터베이스 설치 및 설정",
            "description": "PostgreSQL 설치 및 데이터베이스 생성",
            "status": "done",
            "details": "PostgreSQL을 설치하고 auto_trade_db 데이터베이스를 생성합니다. 필요한 사용자 권한을 설정합니다.",
            "testStrategy": "psql로 데이터베이스 연결 테스트"
          },
          {
            "id": 2,
            "title": "데이터베이스 스키마 설계",
            "description": "주식 자동매매 시스템에 필요한 테이블 설계",
            "status": "done",
            "details": "users, stocks, transactions, trading_strategies, portfolio 테이블을 설계하고 ERD를 작성합니다.",
            "testStrategy": "ERD 검토 및 테이블 관계 확인"
          },
          {
            "id": 3,
            "title": "TypeORM 설정 및 엔티티 생성",
            "description": "TypeORM을 사용한 데이터베이스 연결 및 엔티티 정의",
            "status": "done",
            "details": "TypeORM을 설치하고 설정하며, 설계한 스키마에 맞는 엔티티 클래스들을 생성합니다.",
            "testStrategy": "TypeORM 연결 테스트 및 엔티티 매핑 확인"
          }
        ]
      },
      {
        "id": 3,
        "title": "사용자 인증 및 권한 관리 시스템",
        "description": "JWT 기반 인증, 사용자 등록/로그인, 권한 관리 구현",
        "status": "done",
        "priority": "high",
        "dependencies": [
          2
        ],
        "details": "JWT를 사용한 사용자 인증 시스템을 구현합니다. 사용자 등록, 로그인, 비밀번호 암호화, 토큰 관리, 권한 검증 기능을 포함합니다.",
        "testStrategy": "사용자 등록/로그인 API 테스트, JWT 토큰 검증, 권한 기반 접근 제어 테스트",
        "subtasks": [
          {
            "id": 1,
            "title": "사용자 엔티티 및 DTO 생성",
            "description": "User 엔티티와 관련 DTO 클래스 생성",
            "status": "done",
            "details": "User 엔티티를 생성하고, 회원가입, 로그인, 사용자 정보 수정을 위한 DTO 클래스들을 정의합니다.",
            "testStrategy": "User 엔티티 생성 및 DTO 유효성 검증 테스트"
          },
          {
            "id": 2,
            "title": "JWT 인증 모듈 구현",
            "description": "JWT 토큰 생성, 검증, 갱신 기능 구현",
            "status": "done",
            "details": "@nestjs/jwt를 사용하여 JWT 토큰 생성, 검증, 갱신 기능을 구현합니다. 토큰 만료 시간과 보안 설정을 구성합니다.",
            "testStrategy": "JWT 토큰 생성 및 검증 테스트, 만료 시간 테스트"
          },
          {
            "id": 3,
            "title": "인증 가드 및 데코레이터 구현",
            "description": "JWT 인증 가드와 @Auth() 데코레이터 생성",
            "status": "done",
            "details": "JWT 토큰을 검증하는 가드와 컨트롤러에서 사용할 @Auth() 데코레이터를 구현합니다.",
            "testStrategy": "인증이 필요한 엔드포인트에서 가드가 올바르게 작동하는지 테스트"
          },
          {
            "id": 4,
            "title": "사용자 서비스 및 컨트롤러 구현",
            "description": "회원가입, 로그인, 사용자 정보 관리 API 구현",
            "status": "done",
            "details": "사용자 등록, 로그인, 정보 조회, 수정, 삭제 기능을 구현합니다. bcrypt를 사용하여 비밀번호를 암호화합니다.",
            "testStrategy": "회원가입, 로그인 API 테스트, 사용자 정보 CRUD 테스트"
          }
        ]
      },
      {
        "id": 4,
        "title": "주식 데이터 수집 및 관리 시스템",
        "description": "테슬라 주식 데이터 수집, 저장, 관리 기능 구현",
        "status": "done",
        "priority": "high",
        "dependencies": [
          2
        ],
        "details": "외부 API를 통해 테슬라 주식 데이터를 수집하고 저장하는 시스템을 구현합니다. 실시간 가격, 거래량, 차트 데이터를 관리합니다.",
        "testStrategy": "주식 데이터 수집 API 테스트, 데이터 저장 및 조회 테스트, 실시간 데이터 업데이트 테스트",
        "subtasks": [
          {
            "id": 1,
            "title": "주식 데이터 엔티티 및 DTO 생성",
            "description": "Stock, StockPrice 엔티티와 관련 DTO 생성",
            "status": "done",
            "details": "주식 정보와 가격 데이터를 저장할 엔티티를 생성하고, 데이터 수집 및 조회를 위한 DTO를 정의합니다.",
            "testStrategy": "엔티티 생성 및 DTO 유효성 검증 테스트"
          },
          {
            "id": 2,
            "title": "외부 주식 API 연동",
            "description": "Alpha Vantage 또는 Yahoo Finance API 연동",
            "status": "done",
            "details": "테슬라 주식 데이터를 제공하는 외부 API를 연동합니다. API 키 관리, 요청 제한 처리, 에러 핸들링을 구현합니다.",
            "testStrategy": "외부 API 연결 테스트, 데이터 수집 테스트, 에러 처리 테스트"
          },
          {
            "id": 3,
            "title": "주식 데이터 수집 서비스 구현",
            "description": "정기적인 주식 데이터 수집 및 저장 기능",
            "status": "done",
            "details": "스케줄러를 사용하여 정기적으로 주식 데이터를 수집하고 저장하는 서비스를 구현합니다.",
            "testStrategy": "스케줄러 작동 테스트, 데이터 수집 및 저장 테스트"
          },
          {
            "id": 4,
            "title": "주식 데이터 조회 API 구현",
            "description": "주식 정보 및 가격 데이터 조회 엔드포인트",
            "status": "done",
            "details": "주식 정보 조회, 가격 히스토리 조회, 실시간 가격 조회 API를 구현합니다.",
            "testStrategy": "주식 데이터 조회 API 테스트, 필터링 및 페이징 테스트"
          }
        ]
      },
      {
        "id": 5,
        "title": "포트폴리오 관리 시스템",
        "description": "사용자 포트폴리오 관리, 보유 주식 추적, 수익률 계산",
        "status": "done",
        "priority": "high",
        "dependencies": [
          3,
          4
        ],
        "details": "사용자의 포트폴리오를 관리하는 시스템을 구현합니다. 보유 주식 추적, 수익률 계산, 포트폴리오 분석 기능을 포함합니다.",
        "testStrategy": "포트폴리오 생성, 수정, 조회 API 테스트, 수익률 계산 정확성 테스트",
        "subtasks": [
          {
            "id": 1,
            "title": "포트폴리오 엔티티 및 DTO 생성",
            "description": "Portfolio, PortfolioItem 엔티티와 관련 DTO 생성",
            "status": "done",
            "details": "포트폴리오와 포트폴리오 아이템을 저장할 엔티티를 생성하고, 관련 DTO를 정의합니다.",
            "testStrategy": "엔티티 생성 및 DTO 유효성 검증 테스트"
          },
          {
            "id": 2,
            "title": "포트폴리오 CRUD 서비스 구현",
            "description": "포트폴리오 생성, 수정, 삭제, 조회 기능",
            "status": "done",
            "details": "포트폴리오의 기본 CRUD 기능을 구현합니다. 사용자별 포트폴리오 관리 기능을 포함합니다.",
            "testStrategy": "포트폴리오 CRUD API 테스트, 사용자별 포트폴리오 분리 테스트"
          },
          {
            "id": 3,
            "title": "수익률 계산 서비스 구현",
            "description": "포트폴리오 수익률, 개별 주식 수익률 계산",
            "status": "done",
            "details": "포트폴리오 전체 수익률과 개별 주식 수익률을 계산하는 서비스를 구현합니다. 실시간 가격을 반영한 계산을 수행합니다.",
            "testStrategy": "수익률 계산 정확성 테스트, 다양한 시나리오 테스트"
          },
          {
            "id": 4,
            "title": "포트폴리오 분석 기능 구현",
            "description": "포트폴리오 성과 분석, 차트 데이터 생성",
            "status": "done",
            "details": "포트폴리오 성과 분석, 위험도 계산, 차트 데이터 생성을 위한 기능을 구현합니다.",
            "testStrategy": "포트폴리오 분석 기능 테스트, 차트 데이터 생성 테스트"
          }
        ]
      },
      {
        "id": 6,
        "title": "거래 내역 관리 시스템",
        "description": "매수/매도 거래 내역 저장, 조회, 분석 기능",
        "status": "done",
        "priority": "high",
        "dependencies": [
          3,
          4
        ],
        "details": "사용자의 매수/매도 거래 내역을 저장하고 관리하는 시스템을 구현합니다. 거래 히스토리 조회, 거래 분석 기능을 포함합니다.",
        "testStrategy": "거래 내역 저장 및 조회 API 테스트, 거래 분석 기능 테스트",
        "subtasks": [
          {
            "id": 1,
            "title": "거래 내역 엔티티 및 DTO 생성",
            "description": "Transaction 엔티티와 관련 DTO 생성",
            "status": "done",
            "details": "거래 내역을 저장할 Transaction 엔티티를 생성하고, 거래 생성, 조회를 위한 DTO를 정의합니다.",
            "testStrategy": "엔티티 생성 및 DTO 유효성 검증 테스트"
          },
          {
            "id": 2,
            "title": "거래 내역 CRUD 서비스 구현",
            "description": "거래 내역 생성, 조회, 수정, 삭제 기능",
            "status": "done",
            "details": "거래 내역의 기본 CRUD 기능을 구현합니다. 사용자별 거래 내역 관리 기능을 포함합니다.",
            "testStrategy": "거래 내역 CRUD API 테스트, 사용자별 거래 내역 분리 테스트"
          },
          {
            "id": 3,
            "title": "거래 분석 서비스 구현",
            "description": "거래 패턴 분석, 수익성 분석 기능",
            "status": "done",
            "details": "거래 패턴 분석, 수익성 분석, 거래 통계를 제공하는 서비스를 구현합니다.",
            "testStrategy": "거래 분석 기능 테스트, 통계 계산 정확성 테스트"
          }
        ]
      },
      {
        "id": 7,
        "title": "자동매매 전략 시스템",
        "description": "자동매매 전략 정의, 관리, 실행 기능 구현",
        "status": "done",
        "priority": "high",
        "dependencies": [
          3,
          4
        ],
        "details": "사용자가 정의할 수 있는 자동매매 전략을 관리하는 시스템을 구현합니다. 전략 생성, 수정, 활성화/비활성화 기능을 포함합니다.",
        "testStrategy": "전략 CRUD API 테스트, 전략 활성화/비활성화 테스트",
        "subtasks": [
          {
            "id": 1,
            "title": "전략 엔티티 및 DTO 생성",
            "description": "TradingStrategy 엔티티와 관련 DTO 생성",
            "status": "done",
            "details": "자동매매 전략을 저장할 TradingStrategy 엔티티를 생성하고, 전략 생성, 수정을 위한 DTO를 정의합니다.",
            "testStrategy": "엔티티 생성 및 DTO 유효성 검증 테스트"
          },
          {
            "id": 2,
            "title": "전략 CRUD 서비스 구현",
            "description": "전략 생성, 수정, 삭제, 조회 기능",
            "status": "done",
            "details": "자동매매 전략의 기본 CRUD 기능을 구현합니다. 사용자별 전략 관리 기능을 포함합니다.",
            "testStrategy": "전략 CRUD API 테스트, 사용자별 전략 분리 테스트"
          },
          {
            "id": 3,
            "title": "전략 활성화/비활성화 기능",
            "description": "전략 실행 상태 관리 기능",
            "status": "done",
            "details": "전략을 활성화/비활성화하는 기능을 구현합니다. 활성화된 전략만 자동매매 엔진에서 실행되도록 합니다.",
            "testStrategy": "전략 활성화/비활성화 API 테스트, 상태 변경 테스트"
          }
        ]
      },
      {
        "id": 8,
        "title": "자동매매 엔진 구현",
        "description": "자동매매 전략 실행, 매수/매도 신호 생성, 주문 처리",
        "status": "done",
        "priority": "high",
        "dependencies": [
          4,
          7
        ],
        "details": "정의된 자동매매 전략을 실행하는 엔진을 구현합니다. 실시간 주식 데이터를 분석하여 매수/매도 신호를 생성하고 주문을 처리합니다.",
        "testStrategy": "자동매매 엔진 실행 테스트, 매수/매도 신호 생성 테스트, 주문 처리 테스트",
        "subtasks": [
          {
            "id": 1,
            "title": "전략 실행 엔진 구현",
            "description": "활성화된 전략을 실행하는 엔진",
            "status": "done",
            "details": "활성화된 자동매매 전략을 주기적으로 실행하는 엔진을 구현합니다. 스케줄러를 사용하여 정기적으로 전략을 평가합니다.",
            "testStrategy": "전략 실행 엔진 테스트, 스케줄러 작동 테스트"
          },
          {
            "id": 2,
            "title": "매수/매도 신호 생성 로직",
            "description": "전략 조건에 따른 매수/매도 신호 생성",
            "status": "done",
            "details": "정의된 전략 조건에 따라 매수/매도 신호를 생성하는 로직을 구현합니다. 다양한 기술적 지표를 활용합니다.",
            "testStrategy": "매수/매도 신호 생성 테스트, 다양한 전략 조건 테스트"
          },
          {
            "id": 3,
            "title": "주문 처리 시스템 구현",
            "description": "매수/매도 주문 생성 및 처리",
            "status": "done",
            "details": "매수/매도 신호에 따라 실제 주문을 생성하고 처리하는 시스템을 구현합니다. 주문 상태 관리 기능을 포함합니다.",
            "testStrategy": "주문 생성 및 처리 테스트, 주문 상태 관리 테스트"
          }
        ]
      },
      {
        "id": 9,
        "title": "알림 시스템 구현",
        "description": "거래 알림, 포트폴리오 변화 알림, 시스템 상태 알림",
        "status": "done",
        "priority": "medium",
        "dependencies": [
          3,
          5,
          6,
          8
        ],
        "details": "사용자에게 중요한 이벤트를 알리는 알림 시스템을 구현합니다. 거래 실행, 포트폴리오 변화, 시스템 오류 등을 알림으로 전송합니다.",
        "testStrategy": "알림 생성 및 전송 테스트, 다양한 알림 타입 테스트",
        "subtasks": [
          {
            "id": 1,
            "title": "알림 엔티티 및 DTO 생성",
            "description": "Notification 엔티티와 관련 DTO 생성",
            "status": "done",
            "details": "알림을 저장할 Notification 엔티티를 생성하고, 알림 생성, 조회를 위한 DTO를 정의합니다.",
            "testStrategy": "엔티티 생성 및 DTO 유효성 검증 테스트"
          },
          {
            "id": 2,
            "title": "알림 서비스 구현",
            "description": "알림 생성, 저장, 전송 기능",
            "status": "done",
            "details": "다양한 이벤트에 따른 알림을 생성하고 저장하는 서비스를 구현합니다. 이메일, 푸시 알림 등을 지원합니다.",
            "testStrategy": "알림 생성 및 저장 테스트, 다양한 알림 타입 테스트"
          },
          {
            "id": 3,
            "title": "알림 설정 관리",
            "description": "사용자별 알림 설정 관리 기능",
            "status": "done",
            "details": "사용자가 원하는 알림 타입과 빈도를 설정할 수 있는 기능을 구현합니다.",
            "testStrategy": "알림 설정 관리 API 테스트, 설정 적용 테스트"
          }
        ]
      },
      {
        "id": 10,
        "title": "API 문서화 및 테스트",
        "description": "Swagger API 문서화, 단위 테스트, 통합 테스트 구현",
        "status": "in-progress",
        "priority": "medium",
        "dependencies": [
          3,
          4,
          5,
          6,
          7,
          8,
          9
        ],
        "details": "모든 API에 대한 문서화와 테스트를 구현합니다. Swagger를 사용한 API 문서화, Jest를 사용한 단위 테스트, 통합 테스트를 포함합니다.",
        "testStrategy": "API 문서 접근 테스트, 단위 테스트 실행, 통합 테스트 실행",
        "subtasks": [
          {
            "id": 1,
            "title": "Swagger API 문서화",
            "description": "모든 API 엔드포인트에 대한 Swagger 문서 생성",
            "status": "done",
            "details": "@nestjs/swagger를 사용하여 모든 API 엔드포인트에 대한 문서를 생성합니다. DTO와 응답 스키마를 포함합니다.",
            "testStrategy": "Swagger UI 접근 테스트, API 문서 정확성 확인"
          },
          {
            "id": 2,
            "title": "단위 테스트 구현",
            "description": "서비스, 컨트롤러, 가드에 대한 단위 테스트",
            "status": "in-progress",
            "details": "Jest를 사용하여 모든 서비스, 컨트롤러, 가드에 대한 단위 테스트를 구현합니다. 모킹을 활용하여 의존성을 격리합니다.",
            "testStrategy": "단위 테스트 실행, 테스트 커버리지 확인"
          },
          {
            "id": 3,
            "title": "통합 테스트 구현",
            "description": "API 엔드포인트에 대한 통합 테스트",
            "status": "pending",
            "details": "실제 데이터베이스와 외부 API를 사용하여 API 엔드포인트에 대한 통합 테스트를 구현합니다.",
            "testStrategy": "통합 테스트 실행, 전체 시스템 동작 확인"
          }
        ]
      },
      {
        "id": 11,
        "title": "로깅 및 모니터링 시스템",
        "description": "애플리케이션 로깅, 성능 모니터링, 에러 추적",
        "status": "done",
        "priority": "medium",
        "dependencies": [
          1
        ],
        "details": "애플리케이션의 로깅과 모니터링 시스템을 구현합니다. Winston을 사용한 로깅, 성능 모니터링, 에러 추적 기능을 포함합니다.",
        "testStrategy": "로깅 시스템 테스트, 모니터링 데이터 수집 테스트",
        "subtasks": [
          {
            "id": 1,
            "title": "Winston 로깅 설정",
            "description": "구조화된 로깅 시스템 구현",
            "status": "done",
            "details": "Winston을 사용하여 구조화된 로깅 시스템을 구현합니다. 로그 레벨, 로그 포맷, 로그 저장을 설정합니다.",
            "testStrategy": "로그 생성 및 저장 테스트, 로그 레벨별 필터링 테스트"
          },
          {
            "id": 2,
            "title": "성능 모니터링 구현",
            "description": "API 응답 시간, 데이터베이스 쿼리 성능 모니터링",
            "status": "done",
            "details": "API 응답 시간, 데이터베이스 쿼리 성능, 메모리 사용량 등을 모니터링하는 기능을 구현합니다.",
            "testStrategy": "성능 모니터링 데이터 수집 테스트, 성능 지표 확인"
          },
          {
            "id": 3,
            "title": "에러 추적 및 알림",
            "description": "애플리케이션 에러 추적 및 관리자 알림",
            "status": "done",
            "details": "애플리케이션에서 발생하는 에러를 추적하고 관리자에게 알림을 보내는 기능을 구현합니다.",
            "testStrategy": "에러 발생 시 추적 및 알림 테스트"
          }
        ]
      },
      {
        "id": 12,
        "title": "보안 강화 및 검증",
        "description": "입력 검증, SQL 인젝션 방지, XSS 방지, CORS 설정",
        "status": "pending",
        "priority": "high",
        "dependencies": [
          3,
          10
        ],
        "details": "애플리케이션의 보안을 강화합니다. 입력 검증, SQL 인젝션 방지, XSS 방지, CORS 설정, rate limiting 등을 구현합니다.",
        "testStrategy": "보안 취약점 테스트, 입력 검증 테스트, rate limiting 테스트",
        "subtasks": [
          {
            "id": 1,
            "title": "입력 검증 강화",
            "description": "class-validator를 사용한 DTO 검증 강화",
            "status": "pending",
            "details": "class-validator를 사용하여 모든 DTO에 대한 입력 검증을 강화합니다. 사용자 정의 검증 규칙을 추가합니다.",
            "testStrategy": "입력 검증 테스트, 잘못된 입력 처리 테스트"
          },
          {
            "id": 2,
            "title": "SQL 인젝션 및 XSS 방지",
            "description": "TypeORM의 파라미터 바인딩 활용, XSS 방지",
            "status": "pending",
            "details": "TypeORM의 파라미터 바인딩을 활용하여 SQL 인젝션을 방지하고, XSS 공격을 방지하는 기능을 구현합니다.",
            "testStrategy": "SQL 인젝션 공격 시뮬레이션 테스트, XSS 공격 시뮬레이션 테스트"
          },
          {
            "id": 3,
            "title": "CORS 및 Rate Limiting 설정",
            "description": "CORS 정책 설정, API 요청 제한 구현",
            "status": "pending",
            "details": "CORS 정책을 설정하고, API 요청에 대한 rate limiting을 구현합니다.",
            "testStrategy": "CORS 정책 테스트, rate limiting 테스트"
          }
        ]
      },
      {
        "id": 13,
        "title": "배포 및 운영 환경 설정",
        "description": "Docker 컨테이너화, 환경 변수 관리, 배포 스크립트",
        "status": "pending",
        "priority": "medium",
        "dependencies": [
          10,
          11,
          12
        ],
        "details": "애플리케이션을 배포하고 운영할 수 있는 환경을 설정합니다. Docker 컨테이너화, 환경 변수 관리, 배포 스크립트를 구현합니다.",
        "testStrategy": "Docker 빌드 및 실행 테스트, 환경 변수 로드 테스트",
        "subtasks": [
          {
            "id": 1,
            "title": "Docker 컨테이너화",
            "description": "Dockerfile 및 docker-compose.yml 생성",
            "status": "pending",
            "details": "애플리케이션과 PostgreSQL을 위한 Dockerfile과 docker-compose.yml을 생성합니다.",
            "testStrategy": "Docker 빌드 및 실행 테스트, 컨테이너 간 통신 테스트"
          },
          {
            "id": 2,
            "title": "환경 변수 관리",
            "description": "개발/운영 환경별 환경 변수 설정",
            "status": "pending",
            "details": "개발, 테스트, 운영 환경별로 환경 변수를 관리하는 시스템을 구현합니다.",
            "testStrategy": "환경별 설정 로드 테스트, 환경 변수 검증 테스트"
          },
          {
            "id": 3,
            "title": "배포 스크립트 생성",
            "description": "자동화된 배포 스크립트 구현",
            "status": "pending",
            "details": "애플리케이션 배포를 자동화하는 스크립트를 생성합니다. 데이터베이스 마이그레이션, 애플리케이션 시작을 포함합니다.",
            "testStrategy": "배포 스크립트 실행 테스트, 배포 후 애플리케이션 동작 확인"
          }
        ]
      },
      {
        "id": 14,
        "title": "성능 최적화",
        "description": "데이터베이스 쿼리 최적화, 캐싱 구현, API 응답 최적화",
        "status": "pending",
        "priority": "medium",
        "dependencies": [
          10,
          11
        ],
        "details": "애플리케이션의 성능을 최적화합니다. 데이터베이스 쿼리 최적화, Redis 캐싱, API 응답 최적화를 구현합니다.",
        "testStrategy": "성능 벤치마크 테스트, 캐싱 효과 테스트",
        "subtasks": [
          {
            "id": 1,
            "title": "데이터베이스 쿼리 최적화",
            "description": "인덱스 추가, 쿼리 최적화",
            "status": "pending",
            "details": "자주 사용되는 쿼리에 대한 인덱스를 추가하고, 쿼리를 최적화합니다.",
            "testStrategy": "쿼리 실행 계획 분석, 성능 개선 확인"
          },
          {
            "id": 2,
            "title": "Redis 캐싱 구현",
            "description": "주식 데이터 및 API 응답 캐싱",
            "status": "pending",
            "details": "Redis를 사용하여 주식 데이터와 API 응답을 캐싱하는 기능을 구현합니다.",
            "testStrategy": "캐싱 동작 테스트, 캐시 무효화 테스트"
          },
          {
            "id": 3,
            "title": "API 응답 최적화",
            "description": "응답 압축, 지연 로딩 구현",
            "status": "pending",
            "details": "API 응답을 압축하고, 필요한 경우 지연 로딩을 구현하여 응답 속도를 개선합니다.",
            "testStrategy": "응답 시간 측정, 압축 효과 테스트"
          }
        ]
      },
      {
        "id": 15,
        "title": "시스템 통합 테스트 및 최종 검증",
        "description": "전체 시스템 통합 테스트, 사용자 시나리오 테스트, 성능 테스트",
        "status": "pending",
        "priority": "high",
        "dependencies": [
          13,
          14
        ],
        "details": "전체 시스템에 대한 통합 테스트를 수행하고 최종 검증을 완료합니다. 사용자 시나리오 테스트, 성능 테스트, 보안 테스트를 포함합니다.",
        "testStrategy": "전체 시스템 통합 테스트, 사용자 시나리오 테스트, 성능 벤치마크 테스트",
        "subtasks": [
          {
            "id": 1,
            "title": "전체 시스템 통합 테스트",
            "description": "모든 모듈이 함께 작동하는지 테스트",
            "status": "pending",
            "details": "모든 모듈이 함께 올바르게 작동하는지 확인하는 통합 테스트를 수행합니다.",
            "testStrategy": "통합 테스트 실행, 모든 기능 동작 확인"
          },
          {
            "id": 2,
            "title": "사용자 시나리오 테스트",
            "description": "실제 사용자 시나리오 기반 테스트",
            "status": "pending",
            "details": "실제 사용자가 시스템을 사용하는 시나리오를 기반으로 한 테스트를 수행합니다.",
            "testStrategy": "사용자 시나리오 테스트, 엔드투엔드 테스트"
          },
          {
            "id": 3,
            "title": "성능 및 보안 최종 테스트",
            "description": "성능 벤치마크 및 보안 취약점 테스트",
            "status": "pending",
            "details": "시스템의 최종 성능을 측정하고 보안 취약점을 검사합니다.",
            "testStrategy": "성능 벤치마크 테스트, 보안 취약점 스캔"
          }
        ]
      },
      {
        "id": 16,
        "title": "한국투자증권 WebSocket API 구현",
        "description": "한국투자증권 WebSocket API를 통한 실시간 주식 데이터 수집, 실시간 주문 처리, WebSocket 연결 관리, 실시간 알림 기능 구현",
        "details": "",
        "testStrategy": "",
        "status": "done",
        "dependencies": [
          4,
          8
        ],
        "priority": "high",
        "subtasks": [
          {
            "id": 1,
            "title": "WebSocket 연결 관리 시스템 구현",
            "description": "한국투자증권 WebSocket API 연결 관리, 인증, 재연결, 에러 처리, 연결 상태 모니터링 기능 구현",
            "details": "- WebSocket 클라이언트 설정 및 연결 관리\n- JWT 토큰 기반 인증 처리\n- 자동 재연결 로직 구현\n- 연결 상태 모니터링 및 로깅\n- 에러 처리 및 복구 메커니즘\n- 연결 풀 관리 (필요시)",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 16
          },
          {
            "id": 2,
            "title": "WebSocket 서버 구현 (프론트엔드 연동)",
            "description": "Next.js 프론트엔드와의 실시간 통신을 위한 WebSocket 서버 구현",
            "details": "- NestJS WebSocket Gateway 구현\n- 클라이언트 연결 관리 및 인증\n- 실시간 데이터 브로드캐스팅\n- 클라이언트별 구독 관리\n- 연결 상태 모니터링\n- 에러 처리 및 재연결 지원\n- 메시지 큐잉 및 배치 처리",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 16
          },
          {
            "id": 3,
            "title": "실시간 주식 데이터 수집 시스템 구현",
            "description": "WebSocket을 통한 실시간 주식 데이터 수집, 파싱, 저장, 캐싱 기능 구현",
            "details": "- 실시간 체결가 데이터 수집 및 파싱\n- 실시간 호가 데이터 수집 및 파싱\n- 실시간 거래량 데이터 수집 및 파싱\n- 데이터 검증 및 필터링\n- 실시간 데이터베이스 저장\n- Redis 캐싱을 통한 빠른 데이터 접근\n- 데이터 정규화 및 표준화",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 16
          },
          {
            "id": 4,
            "title": "실시간 주문 처리 시스템 구현",
            "description": "WebSocket을 통한 실시간 주문 처리, 체결, 취소 기능 구현",
            "details": "- 실시간 주문 접수 및 처리\n- 실시간 체결 정보 수집\n- 실시간 주문 취소 처리\n- 주문 상태 실시간 업데이트\n- 포트폴리오 실시간 업데이트\n- 주문 검증 및 위험 관리\n- 실시간 주문 알림",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 16
          },
          {
            "id": 5,
            "title": "실시간 알림 및 이벤트 시스템 구현",
            "description": "실시간 알림, 이벤트 브로드캐스팅, 클라이언트 구독 관리 기능 구현",
            "details": "- 실시간 포트폴리오 변화 알림\n- 실시간 거래 알림\n- 실시간 시스템 상태 알림\n- 클라이언트별 알림 설정 관리\n- 이벤트 브로드캐스팅 시스템\n- 알림 우선순위 및 필터링\n- 알림 히스토리 관리",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 16
          }
        ]
      }
    ],
    "metadata": {
      "created": "2025-07-21T04:36:05.053Z",
      "updated": "2025-08-05T08:22:43.067Z",
      "description": "Tasks for master context"
    }
  }
}