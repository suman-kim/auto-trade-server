import { Repository } from 'typeorm';
import { EventEmitter } from 'events';
import { Notification } from '../../entities/notification.entity';
import { UserNotificationSettings } from '../../entities/user-notification-settings.entity';
import { User } from '../../entities/user.entity';
import { CreateNotificationDto, SendNotificationDto } from '../../dtos/notification.dto';
import { NotificationStatus } from '../../entities/notification.entity';
import { EmailService } from './email.service';
import { NotificationTemplateService } from './notification-template.service';
export declare class NotificationService extends EventEmitter {
    private readonly notificationRepository;
    private readonly userNotificationSettingsRepository;
    private readonly userRepository;
    private readonly emailService;
    private readonly templateService;
    private readonly logger;
    constructor(notificationRepository: Repository<Notification>, userNotificationSettingsRepository: Repository<UserNotificationSettings>, userRepository: Repository<User>, emailService: EmailService, templateService: NotificationTemplateService);
    private setupEventListeners;
    createNotification(createNotificationDto: CreateNotificationDto): Promise<Notification>;
    sendNotificationToUser(userId: number, sendNotificationDto: SendNotificationDto): Promise<void>;
    sendNotificationToUsers(userIds: number[], sendNotificationDto: SendNotificationDto): Promise<void>;
    updateNotificationStatus(notificationId: number, status: NotificationStatus): Promise<Notification>;
    getUserNotifications(userId: number, limit?: number, offset?: number): Promise<Notification[]>;
    getUnreadNotificationCount(userId: number): Promise<number>;
    markNotificationAsRead(notificationId: number): Promise<void>;
    private getUserNotificationSettings;
    private isNotificationTypeEnabled;
    private sendNotificationByMethods;
    private sendEmailNotification;
    private sendPushNotification;
    private sendWebSocketNotification;
    private handleTradeExecuted;
    private handlePriceAlert;
    private handlePortfolioUpdate;
    private handleStrategyTriggered;
    private handleSystemAlert;
    getNotificationStatistics(userId: number): Promise<any>;
    cleanupOldNotifications(daysToKeep?: number): Promise<number>;
    retryFailedNotifications(): Promise<number>;
    getNotificationDashboardData(): Promise<any>;
}
