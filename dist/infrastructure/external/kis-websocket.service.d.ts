import { OnModuleDestroy, OnApplicationBootstrap } from '@nestjs/common';
import { EventEmitter } from 'events';
import { KisApiService } from './kis-api.service';
import { ConfigService } from '@nestjs/config';
import { Stock } from '../../entities/stock.entity';
import { Repository } from 'typeorm';
export declare class KisWebSocketService extends EventEmitter implements OnApplicationBootstrap, OnModuleDestroy {
    private readonly config;
    private readonly kisApiService;
    private readonly stockRepository;
    private readonly logger;
    private ws;
    private reconnectAttempts;
    private maxReconnectAttempts;
    private reconnectInterval;
    private heartbeatInterval;
    private isConnected;
    private isConnecting;
    private websocketToken;
    private trIdList;
    private stockCodeList;
    private subscribedStocks;
    private readonly wsUrl;
    private readonly appKey;
    private readonly appSecret;
    private readonly mode;
    constructor(config: ConfigService, kisApiService: KisApiService, stockRepository: Repository<Stock>);
    onApplicationBootstrap(): Promise<void>;
    onModuleDestroy(): Promise<void>;
    connect(): Promise<void>;
    private setupEventListeners;
    private handleMessage;
    private handleTradeData;
    private handleOrderBookData;
    private handleOrderExecution;
    private handleBalanceData;
    private handleHeartbeat;
    subscribeStockPrice(trId: string, stockCode: string): Promise<void>;
    unsubscribeStockPrice(stockCode: string): Promise<void>;
    getSubscribedStocks(): Map<string, string>;
    isSubscribed(stockCode: string): boolean;
    unsubscribeAllStocks(): Promise<void>;
    private startHeartbeat;
    private stopHeartbeat;
    private handleDisconnection;
    private handleConnectionError;
    private scheduleReconnect;
    disconnect(): Promise<void>;
    isWebSocketConnected(): boolean;
    sendMessage(message: string): boolean;
    sendOrder(order: any): boolean;
    cancelOrder(orderId: string): boolean;
    monitorConnection(): void;
    logConnectionStatus(): void;
}
